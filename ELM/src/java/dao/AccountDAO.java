package dao;

import java.sql.*;
import model.Account;
import dao.DBContext;
import model.GoogleAccount;

public class AccountDAO extends DBContext {

    // ‚úÖ L·∫•y t√†i kho·∫£n theo email
    public Account findByEmail(String email) {
        String sql = "SELECT * FROM Accounts WHERE email = ?";
        try {
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Account a = new Account();
                a.setAccountId(rs.getInt("AccountID"));
                a.setEmail(rs.getString("email"));
                a.setPassword(rs.getString("password"));
                a.setName(rs.getString("name"));
                a.setPicture(rs.getString("picture"));
                a.setRole(rs.getString("role"));
                return a;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    // ‚úÖ Th√™m t√†i kho·∫£n m·ªõi
    public boolean insert(Account a) {
        String sql = "INSERT INTO Accounts (email, password, name, picture, role) VALUES (?, ?, ?, ?, ?)";
        try {
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, a.getEmail());
            ps.setString(2, a.getPassword());
            ps.setString(3, a.getName());
            ps.setString(4, a.getPicture());
            ps.setString(5, a.getRole());

            int rows = ps.executeUpdate();
            if (rows > 0) {
                ResultSet rs = ps.getGeneratedKeys();
                if (rs.next()) {
                    a.setAccountId(rs.getInt(1));
                }
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin
    public boolean update(Account a) {
        String sql = "UPDATE Accounts SET password=?, name=?, picture=?, role=? WHERE email=?";
        try {
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, a.getPassword());
            ps.setString(2, a.getName());
            ps.setString(3, a.getPicture());
            ps.setString(4, a.getRole());
            ps.setString(5, a.getEmail());
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // ‚úÖ ƒêƒÉng nh·∫≠p
    public Account login(String email, String password) {
        String sql = "SELECT * FROM Accounts WHERE email=? AND password=?";
        try {
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, email);
            ps.setString(2, password);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Account a = new Account();
                a.setAccountId(rs.getInt("AccountID"));
                a.setEmail(rs.getString("email"));
                a.setPassword(rs.getString("password"));
                a.setName(rs.getString("name"));
                a.setPicture(rs.getString("picture"));
                a.setRole(rs.getString("role"));
                return a;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public Account insertOrUpdateFromGoogle(GoogleAccount googleUser) {
    if (googleUser == null || googleUser.getEmail() == null) {
        return null;
    }

    try {
        Account account = findByEmail(googleUser.getEmail());

        if (account == null) {
            // üü¢ N·∫øu email ch∆∞a c√≥ ‚Üí t·ª± ƒë·ªông insert v√†o DB
            account = new Account();
            account.setEmail(googleUser.getEmail());
            account.setName(googleUser.getName());
            account.setPicture(googleUser.getPicture());
            account.setRole("learner"); // m·∫∑c ƒë·ªãnh l√† learner

            String sql = "INSERT INTO Accounts(email, name, picture, role) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, account.getEmail());
            ps.setString(2, account.getName());
            ps.setString(3, account.getPicture());
            ps.setString(4, account.getRole());
            int rows = ps.executeUpdate();

            if (rows > 0) {
                ResultSet rs = ps.getGeneratedKeys();
                if (rs.next()) {
                    account.setAccountId(rs.getInt(1));
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n m·ªõi t·ª´ Google: " + account.getEmail());
        } else {
            // üü° N·∫øu ƒë√£ c√≥ ‚Üí c·∫≠p nh·∫≠t l·∫°i th√¥ng tin Google
            account.setName(googleUser.getName());
            account.setPicture(googleUser.getPicture());

            String sql = "UPDATE Accounts SET name=?, picture=? WHERE email=?";
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, account.getName());
            ps.setString(2, account.getPicture());
            ps.setString(3, account.getEmail());
            ps.executeUpdate();

            System.out.println("üîÅ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n Google: " + account.getEmail());
        }

        return account;

    } catch (Exception e) {
        e.printStackTrace();
    }

    return null;
}

    public static void main(String[] args) {
           AccountDAO dao = new AccountDAO();

        // üü¢ 1Ô∏è‚É£ Test th√™m t√†i kho·∫£n m·ªõi
        Account newAcc = new Account();
        newAcc.setEmail("testuser@example.com");
        newAcc.setPassword("123456");
        newAcc.setName("Test User");
        newAcc.setPicture("https://example.com/avatar.jpg");
        newAcc.setRole("learner");

        boolean inserted = dao.insert(newAcc);
        if (inserted) {
            System.out.println("‚úÖ Insert th√†nh c√¥ng! ID m·ªõi: " + newAcc.getAccountId());
        } else {
            System.out.println("‚ùå Insert th·∫•t b·∫°i!");
        }

        // üü° 2Ô∏è‚É£ Test ƒëƒÉng nh·∫≠p
        Account loginAcc = dao.login("testuser@example.com", "123456");
        if (loginAcc != null) {
            System.out.println("‚úÖ Login th√†nh c√¥ng!");
            System.out.println("T√™n ng∆∞·ªùi d√πng: " + loginAcc.getName());
            System.out.println("Vai tr√≤: " + loginAcc.getRole());
        } else {
            System.out.println("‚ùå Login th·∫•t b·∫°i (sai email ho·∫∑c password).");
        }

        // üîµ 3Ô∏è‚É£ Test c·∫≠p nh·∫≠t th√¥ng tin
        if (loginAcc != null) {
            loginAcc.setName("User Updated");
            loginAcc.setPicture("https://example.com/new-avatar.jpg");
            boolean updated = dao.update(loginAcc);
            if (updated) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            } else {
                System.out.println("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
            }
        }

        // üî¥ 4Ô∏è‚É£ Test Google login update (ch·ªâ update n·∫øu email t·ªìn t·∫°i)
        Account googleAcc = new Account();
        googleAcc.setEmail("testuser@example.com"); // email ƒë√£ t·ªìn t·∫°i
        googleAcc.setName("Google Updated User");
        googleAcc.setPicture("https://example.com/google-avatar.jpg");

    }
}
